#nav_name properties

properties - данные объекта
===========================

Не смотря на то, что под properties обычно подразумеваются обращения к переменным
— свойствам объекта, в BORS исторически используется более широкий смысл
и доступ к свойствам обычно осуществляется через методы объекта. Но в английской
транскрипции для унификации используется по-прежнему термин properties.

Все данные объекта можно условно поделить на три категории (условно — потому что
много смешанных случаев).

1. Хранимые данные объекта
--------------------------
Это параметры, извлекаемые из БД и сохраняющиеся туда при их изменениях. Например,
у нас есть объект «сообщение блога», у которого среди параметров есть дата
последнего изменения, {{{php $blog_record->modify_time()}}}. Мы можем в любой момент
изменить это значение через {{{php $blog_record->set_modify_time(time(), true)}}}
и изменённое значение автоматически сохранится в базе данных при завершении работы
скрипта или при вызове принудительного сохранения в любой момент.

2. Несохраняемые параметры объекта, атрибуты
--------------------------------------------
Другая сущность данных — это временные параметры, атрибуты, которые выставляются в тот
или иной момент для объекта, но которые не сохраняются при завершении работы. Это могут
быть какие-то кеши, параметры вызова и т.п. Например, URL, по которому вызывался загружаемый
объект сохраняется по {{{php $object->set_attr('called_url')}}} и потом в любой момент
может быть вызван по {{{php $object->attr('called_url')}}} или прямо по {{{php $object->called_url()}}}.

3. Вычисляемые параметры, обычные методы
----------------------------------------
Это самые обычные методы, обычно не записываемые, которые возвращают результат на основе
имеющихся данных.

С точки зрения объектной системы нет разницы между всеми тремя видами данных и именно поэтому
обращения к properties выполняются с помощью методов, а не с помощью доступа к переменным.
Когда наш скрипт запрашивает заголовок топика форума по {{{php $topic->title()}}},
то не важно, хранится этот заголовок в базе данных, был вычислен и закеширован в атрибуте
или каждый раз является результатом работы метода объекта. Мы просто получаем результат.
