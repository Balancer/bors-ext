#nav_name блог
#create_time 01.09.2011 21:13

Уроки: Пишем простейший блог. Часть 2
=====================================

[i]Продолжение. Начало в [http://bors.balancer.ru/_bors/doc/examples/simple-blog-1/ первой части][/i]

Пишем потоковый вьювер записей
------------------------------

Небольшое отступление. Объекты BORS© могут при условии наиличия соответствующих
методов отображаться в браузер пользователя. При запросе страницы, картинки, RSS-ленты
или иной сущности, создаваемой фреймворком, после попадения на единую точку входа (BORS_CORE/main.php),
по набору правил, в котором прописано соответствие масок ссылок и классов, или автоматически
(это отдельная история), находится класс, который должен отвечать за вывод запрошенного. Дальше,
взывающийся из main.php контроллер запрашивает у объекта метод {{{php content()}}}, который и
возвращает нужное содержимое. Столь низкоуровневая работа нужна редко, чаще всего
выводятся достаточно высокоуровневые специализированные классы. Например, обычная html-страница.

Для удобства каждая страница считается состоящей из двух логических сущностей — _общего шаблона_,
совпадающего для всех страниц сайта или отдельной его категории (понятно, что они могут отличаться
и в рамках одного шаблона) — это заголовок, футер, всякие меню и, собственно, _тела страницы_,
которое и отображает индивидуальный контент страницы. В терминах фреймворка первое называется
*template* или *page*, второе — *body* (реже устаревшее *local*).

Есть отдельный шаблон всей страницы, есть отдельный шаблон тела страницы. В общем случае
они могут отображаться разными шаблонизаторами или даже, вообще, создаваться объектом напрямую.

Для объектов обычных страниц метод {{{php content()}}} возвращает весь полный html-код страницы,
в котором где-то внутри уже встроен вызванные в процессе построения страницы вывод метода
{{{php body()}}}, возвращающего html-текст тела страницы.

По умолчанию во фреймворке используется несложный общий шаблон, который Вы видите
при чтении этой документации (думаю, не удивительно, что вся эта документация выводится
фреймворком), а для разметки используется движок Smarty.

Общее создание страницы для начала не интересно. А вот принцип построения тела страницы рассмотрим
чуть подробнее. Для классов, наследников *bors_page*, уже определён метод {{{php body()}}}, работающий
следующим образом. В качестве шаблона тела страницы, берётся .html-файл, имеющий такое же имя
и местоположение, как класс выводимого файла. Скажем, мы хотим вывести список блоговых
записей с помощью класса *exsiblo_main*. Тогда класс у нас находится в каталоге 
*BORS_SITE/classes/exsiblo/main.php*, а шаблон его тела возьмётся из файла
*BORS_SITE/classes/exsiblo/main.html*. Как я уже писал, по умолчанию это будет разметка
на Smarty (можно менять на что угодно). Данные, «скармливаемые» этому шаблону,
частично подготовит фреймворк (например, в переменной {{{php $this}}} будет находится
ссылка на выводящий информацию объект), частично — сам объект, через метод {{{php body_data()}}},
возвращающий ассоциативный массив параметров, передаваемых шаблону.

[b]Не забудьте сделать {{{php array_merge()}}} со значением, возвращаемым родительским классом![/b]

Но у нас всё даже несколько проще. Постраничный просмотр серии записей задача столь частая,
что для её решения есть готовый базовый класс, *bors_paginated*. Он сам формирует нужные параметры,
стоит только указать ему класс выводимого списка объектов и условия выборки. Итак,
класс, отвечающий за формирование вывода, *BORS_SITE/classes/exsiblo/main.php*:
[code=php]
<?php

class exsiblo_main extends bors_paginated
{
	// Возвращаемое этим методом будет считаться заголовком страницы
	function title() { return 'Мой блог'; }

	// Это — класс списка выводимых объектов:
	function main_class() { return 'exsiblo_blog'; }

	// Порядок сортировки: укажем обратную сортировку по дате
	function order() { return '-create_time'; }
}
[/code]

Теперь нужно описать html-шаблон нашего вывода. Файл *BORS_SITE/classes/exsiblo/main.html*:
[code=smarty]
{* цикл по всем записям *}
{foreach from=$items item="blog"}
	{* заголовок записи *}
	<h2>{$blog->title()|htmlspecialchars}</h2>
	{* дата записи, дд.мм.гггг чч:мм *}
	<h3><i>{$blog->create_time()|date:'d.m.Y H:i'}</i></h3>
	{* html-код текста записи *}
	<p>{$blog->html()}</p>
{/foreach}

{* Вывод кнопочек с номерами страниц для перехода к ним *}
{$this->pages_links_nul()}
[/code]

Собственно, этого уже должно быть достаточно для вывода нашего списка. Количество элементов на страницу
предопределено в родительском классе, по умолчанию — 25. Можно уменьшить:
{{{php
	function items_per_page() { return 10; }
}}}

Метод {{{php html()}}} в классе блога берёт исходный текст и транслирует его bb-code совмесимым
языком разметки lcml, сохраняя возможность прямой вставки html (поэтому lcml_[blue]bb[/blue][green]h[/green]).

Если у вас есть настроенная BORS© система (конечно же нет, это будет отдельный урок ;) ), то уже можно
посмотреть вывод того, что мы понаписали тестовым скриптом:

<table class="btab"><tr><td>
[img]http://img840.imageshack.us/img840/2082/exsiblo1.png[/img]
</td></tr></table>

На следующем уроке рассмотрим запуск простейшей демо-версии фреймворка,
на которой вживую можно пощупать эти примеры.

// 01.09.2011 21:13
// Обсудить материал и задать вопросы можно на [http://balancer.ru/support/2011/09/t82982--urok-1-prostejshij-blog-na-sqlite-bekende.779.html соответствующей теме форума].
