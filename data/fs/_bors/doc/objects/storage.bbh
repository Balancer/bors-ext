storage - хранилища данных
==========================

Хранилища данных (бэкенды) - классы, обеспечивающие загрузку данных
в объекты. Например, *bors_storage_mysql* - класс, обеспечивающий
сохранение и загрузку свойств объекта в mysql-таблицах.

Каждый объект может содержать в себе метод storage_engine(),
возвращающий название класса хранилища и метод storage(),
возвращающий объект класса хранилища. В этом случае производится
загрузка данных объекта с использованием соответствующего хранилища
и автоматическое сохранение модифицированных данных.

По умолчанию метод storage_engine() для классов БД возвращает
устаревший класс *storage_mysql_smart*
и в будущем может быть переопределён.

Метод storage() по умолчанию просто загружает объект хранилища:
[code php]
function storage() { if($storage_class_name = $this->get('storage_engine')) return new $storage_class_name; else return NULL; }
[/code]

//TODO: В будущем необходимо перевести на использование унифицированного названия storage_class()
вместо storage_engine() и, возможно, отказаться от использования $this->get() из-за возможной
неперспективности использования переменных. Обдумать этот вопрос...

Методы
-----

Методы хранилищ данных должны включать:

[code php]function load($object);[/code]

Метод служит для загрузки данных объекта при его инициализации.

[code php]function save($object);[/code]

Метод служит для сохранения изменённых данных объекта.

[code php]function delete($object);[/code]

Метод служит для полного физического удаления объекта.

[code php]function find_all($where);[/code]

Метод возвращает массив объектов, удовлетворяющих условию поиска $where.
Если ни одного объекта не найдено, возвращается пустой массив.

[code php]function find_first($where);[/code]

Метод возвращает один объект, удовлетворяющий условию поиска $where.
Если ни одного объекта не найдено, возвращается NULL.

*Примечания:*
 # Методы find_all() и find_first() для большинства бэкендов
временно не реализованы. Методы bors_find_first (objects_first)
пока работают напрямую с mysql-бэкендом. Требуется рефакторинг.
 # Метод save() для R/O-бэкендов не реализован.
 # Требуется рефакторинг с использованием абстрактного родителя всех бэкендов, в котором были бы описаны заглушки всех методов с генерацией исключений при их вызове.
