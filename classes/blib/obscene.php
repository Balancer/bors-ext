<?php

class blib_obscene
{
	static $map = array(
		'x' => '—Ö',
		'y' => '—É',
		'0' => 'o',
	);

	static function stars($m) { return $m[1] . str_repeat('*', bors_strlen($m[2])) . (empty($m[3])?'':$m[3]); }
	static function stars2($m) { return $m[2] . str_repeat('*', bors_strlen($m[3])) . (empty($m[4])?'':$m[4]); }
	static function stars3($m) { return $m[2] . str_repeat('*', bors_strlen($m[3])) . @$m[4] . @$m[5]; }

	static function mask($text, $abusive = false)
	{
//		$text = preg_replace_callback("/(?<!(—Ä–∞|–ª–æ|–ª–∏|—Ç–∏|—Å—É))([x—Ö])([y—É][–π–∏—è–µe—ë—é])/ui", 'blib_obscene::stars2', $text);
		$text = preg_replace_callback("/(?<!(—Ä–∞|–ª.|—Ä–∏|—Ç–∏|—Å—É|—Å–∏))([x—Ö])([y—É][–π–∏—è–µe—ë—é])/ui", 'blib_obscene::stars2', $text);
		$text = preg_replace_callback("/(\b)([x—Ö])([y—É][—é—è])/ui", 'blib_obscene::stars2', $text);
		$text = preg_replace_callback("/([x—Ö])([y—É][–ª][—è–∏–µ])(\b|[^–≥—Ç–∞–º–Ω])/ui", 'blib_obscene::stars', $text);
		$text = preg_replace_callback("/([^—Äp—Ç][^–∞a–∏][x—Ö])([y—É])([–π—è–µe]|–µ—ë)/ui", 'blib_obscene::stars', $text);
		$text = preg_replace("/([^–†—ÄPp–¢—ÇT][^–ê–∞Aa–ò–∏])([Xx–•—Ö])\.*[Yy–£—É]\.*[–π–ô—è–Ø–µ–ïeEe]\.*/u","\$1\$2***",$text);
		$text = preg_replace_callback("/(–ø—Ä–∏)([—Ö][—É][–µ])([–∞-—è—ë])/ui", 'blib_obscene::stars', $text);

		$text = preg_replace_callback("/([–ü–ø])([–ò–∏][–ó–∑3])([–î–¥–∂])/ui", 'blib_obscene::stars', $text);
		$text = preg_replace("/([–ü–ø])\.*[–ò–∏]\.*[–ó–∑3]\.*[–î–¥]\.*/u","\$1***",$text);

		$text = preg_replace_callback("/(?<!(–∞–º|—Å–∞|–∂–∞|—Ä.|–¥—É))([–±6])(–ª—è)\b/ui", 'blib_obscene::stars2',$text);
		$text = preg_replace("/([–±6])[–ª][—è][–¥]/ui", "\$1***",$text);
		//$text = preg_replace("/([–ë–±])[–õ–ª][–Ø—è]([–¥–î]|\s)/u","\$1**\$2",$text);
//		$text = preg_replace_callback("/(?<!(–æ—Ä|[—Äp][—Éy–∞a–µe]))(–±)(–ª—è)(\b|–¥|\s)/ui", 'blib_obscene::stars', $text);
		$text = preg_replace_callback("/\b(–±–ª)(—è[—Ç–¥])(—å)\b/ui", 'blib_obscene::stars', $text);
		$text = preg_replace_callback("/\b(–±–ª)(—è[—Ç–¥])(—Å—Ç|—Å–∫)/ui", 'blib_obscene::stars', $text);

//$text = preg_replace("/–º–∞–Ω–¥(–∞[^—Ä]|–∞[^—Ç]|–∏|–µ|—É|–æ–π|—ã)/u","–º***",$text);
		$text = preg_replace_callback("/\b([–µe—ë–∏])([–±][a–∞–∏—Éy—ëe–µ–ª–æ0o])\B/ui", 'blib_obscene::stars', $text);
		$text = preg_replace_callback("/([–æo0][–µe])([–±6][–µe])(–Ω—å)/ui", 'blib_obscene::stars', $text);
		$text = preg_replace_callback("/(?<!(–ª|–Ω|—Ç|–¥|—á|—Ä|—â|–∏|–±|–≤))([–µe—ë])([–±][a–∞–∏—Éy])(—Ç—å|–ª|—Å—å|\b)/ui", 'blib_obscene::stars2', $text);
		$text = preg_replace_callback("/(?<!(—Ä|–¥|–ª|–∑|–Ω|—Ç|—Å|—â))([–µe—ë])([–±][–ª])([—è—é–æo0—É–µ])/ui", 'blib_obscene::stars2', $text);
		$text = preg_replace_callback("/(?<!(—Ä))([–µe—ë])([–±][T—Ç])(?!(–∞–º|[–æo0].|—É\b))/ui", 'blib_obscene::stars2', $text);
		$text = preg_replace_callback("/(?<!(–ª|–¥|—á|—à|—Ä))([–µe—ë])(–±–Ω)(—É)/ui", 'blib_obscene::stars2', $text);
		$text = preg_replace_callback("/(–±[–æo0])([—ë–µ]–±)/ui", 'blib_obscene::stars', $text);
		$text = preg_replace_callback("/\b(–ø—Ä–∏|–ø—Ä[–æo0]|–∑–∞|—É|–ø[–æo0]–¥|–ø[–æo0]–¥—å|–ø[–æo0]–¥—ä|–Ω–∞)([–µ—ëe])([–±])/ui", 'blib_obscene::stars', $text);
		$text = preg_replace_callback("/(–≤—ã|–ø–µ—Ä–µ|—Ä–∞–∑—ä)([–µ—ëe–∏])([–±])/ui", 'blib_obscene::stars', $text);
		$text = preg_replace_callback("/(–∑–ª[–æo0])([–µ—ëe][–±])(.+)/ui", 'blib_obscene::stars', $text);

		$text = preg_replace_callback("/\b(–∑–∞)(–ª—É)(–ø[–∞-—è—ë]+)/ui", 'blib_obscene::stars', $text);

		if($abusive)
		{
			$text = preg_replace_callback("/\b([–≥])([a–∞o–æ0][B–í–≤])([H–ù–Ω])/ui", 'blib_obscene::stars',$text);
//			$text = preg_replace("/([–°—ÅCc])[–£—ÉYy][–ö–∫Kk]([–∞–êaA–∏–ò–µ–ï—É–£yY]|–æ–π)/u","\$1**\$2",$text);
			$text = preg_replace_callback("/(?<!(–∫–∏|–ª–∞))([–ø])(–∏–¥[–∞–æo0])(—Ä)(\b|[–∞—É–µ—ã])/ui", 'blib_obscene::stars3',$text);
			$text = preg_replace_callback("/(–º—É)(–¥–∞|–¥–∏)(–∫|—á|–ª)/ui", 'blib_obscene::stars', $text);
			//$text = preg_replace("/–∂–æ–ø(–∞|–∏|–µ|—É|–æ–π)/u","–∂**",$text);
		}

		return $text;
	}

	static function __unit_test($test)
	{
		// –°–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ —Å –≤—ã–≥–ª—è–¥–µ—â–∞–º–∏ –æ–±—Å—Ü–µ–Ω–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞–º–∏.
		$allowed = array('–∞–Ω—Å–∞–º–±–ª—è –î–∂–µ–±–∞—Ç –¥–µ–±–∞—Ç—ã –∫–æ–ª–µ–±–∞–Ω–∏—è –∫–æ–ª–µ–±–∞—Ç—å –∫–æ–ª–µ–±–∞—Ç—å—Å—è –ø–æ—Å—Ç–µ–±–∞—Ç—å—Å—è –¥–µ–±–∏–ª–æ–≤ —É—á—ë–±–∞');
		$allowed[] = '–£—Å—É–≥—É–±–ª—è—è—Å—å –∏—Å—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∑–∞—Å—Ç—Ä–∞—Ö—É–π—Ç–µ —Ä—É–±–ª—è –•—É–ª–∏–≥–∞–Ω—ã –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å —Ç–∏—Ö—É—é –ø—Å–∏—Ö—É—é—Ç –ø—Å–∏—Ö—É—é—â–∏–º';
		$allowed[] = '–æ—Å–∫–æ—Ä–±–ª—è—Ç—å —É–ø–æ–¥–æ–±–ª—è—Ç—å—Å—è –£—Å—É–≥—É–±–ª—è—è—Å—å –û–ª–µ–≥–æ–≤–Ω–∞ –ø–ª–æ—Ö—É—é –ª–∏—Ö—É—é —É–ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏—Ö —Å—É—Ö—É—é –≥–ª—É—Ö—É—é';
		$allowed[] = '—Ö—Ä–µ–±—Ç–∞–º–∏ –ì–ª–µ–± –ì–ª–µ–±–∞ –Ω–µ–±—É —Å–∞–±–ª—è –≥—Ä–µ–±–ª—è –∫–æ—Ä–∞–±–ª—è –ª–∞–ø–∏–¥–∞—Ä–∏–π —Å–∫–∏–ø–∏–¥–∞—Ä —Ç—É–µ–±–µ–Ω—å –∑–∞–ª—É–∂—å—é';
		$allowed[] = '–∞–±–ª—è—Ü–∏—è'; // –í –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏!
		$allowed[] = '–∞–±–±–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤–µ–±–∞ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–≥–æ —Å—Ç–µ–±–ª—è–º–∏';
		$allowed[] = '–Ω–µ–±—É –µ—â—ë–± –µ—â–µ–± –Ω—ë–±—É —Ö–ª–µ–±–æ–º –ü–∏–µ–±–∞–ª–≥—Å –¥–µ–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ö–ª–µ–±–Ω—É–ª–æ —Ö—É–ª–∏—Ç';
		$allowed[] = '—Ö—Ä–µ–±—Ç–æ–º —Ö—Ä–µ–±—Ç–∞–º–∏ —Ö—Ä–µ–±—Ç—É —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ –¥–æ—Å—É–¥–µ–±–Ω—É—é –∫–æ–ª–µ–±–ª–µ—Ç—Å—è –±–µ–±–∏ –º—Ä–∞–∑–µ–±–ª–æ–≥–≥–µ—Ä—à–∞';
		$allowed[] = '–¥–∏—Ä–∏–∂–∞–±–ª—è –¥—É–±–ª—è –≤–æ–ª—à–µ–±–Ω—É—é –≤–Ω–µ–±–ª–æ–∫–æ–≤—ã–π –ø–∏—â–µ–±–ª–æ–∫—É —Ö—Ä–µ–±—Ç–∞ –∞—Å—Å–µ–±–ª–µ—Ä–æ–≤';
		$allowed[] = '–∑–∞—à—Ç—Ä–∏—Ö—É–π—Ç–µ –•—É–ª–∏–∞–Ω –ø–æ—Ç—Ä–µ–±–Ω—É—é –•—É–ª–∏–º—Å—É–Ω—Ç'; // –•—É–ª–∏–º—Å—É–Ω—Ç ‚Äî –ø–æ—Å—ë–ª–æ–∫ —Ç–∞–∫–æ–π.
		$allowed[] = '—Ö—É–ª–∞—Ö—É–ø –∏–±–æ —Ö—É–ª–µ–Ω–∏—é';

		foreach($allowed as $s)
			$test->assertEquals($s, self::mask($s, true));

		// –û–±—Å—Ü–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
		$obscene = array('»’¿ –œ»’¿ –œ»’…⁄Õ ‚ÏÒÙ¯ ¬Ã— ¬Ã—ƒ”‘◊œ ¬Ã—‘”‘◊œ ¬Ã—ƒÿ ¬Ã—ƒ’Œ');
		$obscene[] = '≈¬¡‘ÿ ≈¬¡Ã ≈¬¡Œ’‘ÿ”— ≈¬’Œ ≈¬’‘ ≈¬‘…”ÿ ⁄¡≈¬¡Ã”— ⁄¡≈¬…”ÿ ≈¬Œ’Ã…”ÿ ≈¬Œ’ £¬Œ’ ⁄¡≈¬Ãœ';
		$obscene[] = '≈¬… ◊Ÿ≈¬… £¬‘¡ ≈¬‘ –œƒÿ≈¬›…À –œ≈¬≈Œÿ ≈¬£€ÿ”— ƒœÃ¬œ≈¬œÕ ƒœÃ¬œ£¬ ƒœÃ¬œ£¬’ ≈¬Ã¿ ≈¬Ã≈  ◊Ÿ≈¬Ÿ◊¡Ã…”ÿ';
		$obscene[] = '∆’¬Ã— –“œ≈¬ –“œ£¬ ≈¬Ã¡Œ “¡⁄ﬂ≈¬≈Œ…Ã¡ ◊Ÿ…¬¡Ã …¬≈‘';
		$obscene[] = '”–…⁄÷≈ŒŒŸ  –…⁄ƒ…‘ÿ ”–…⁄ƒ…‘ÿ –…⁄ƒ¡ –…ƒœ“ –…ƒ¡“';
		$obscene[] = '⁄¡Ã’–¡ ˙¡Ï’œÍ ˙¡Ã’–≈';
		$obscene[] = '»’  Œ¡»’  –œ»’  Ó≈Ë’≈◊Ÿ  –“…»’≈Ã… “…»’≈◊ »’Ã≈';
		$obscene[] = '‰œ◊Ÿ£¬Ÿ◊¡Ã…”ÿ –≈“≈≈¬œ€…Ã… ⁄Ãœ≈¬’ﬁ¡— ⁄¡≈¬œ€…Ã… ≈¬œ€…‘ÿ';

		foreach($obscene as $words)
		{
			foreach(explode(' ', iconv('koi8-r', 'utf-8', $words)) as $w)
			{
				$masked = self::mask($w, true);
				$test->assertNotEquals($w, $masked);
				$test->assertEquals(bors_strlen($w), bors_strlen($masked), "Tested words: '$w' => '$masked'");
			}
		}

		$obscene = explode(' ', '–≥–æ–≤–Ω–∞ –ø–∏–¥–æ—Ä—ã –ø–∏–¥–∞—Ä–∞—Å –º—É–¥–∞—á—å—ë –º—É–¥–∞–∫ –º—É–¥–∏–ª–∞ –º—É–¥–∏–ª–∫–∞ –º—É–¥–∞–∫–∏');
		foreach($obscene as $w)
		{
			$masked = self::mask($w, true);
			$test->assertNotEquals($w, $masked);
			$test->assertEquals(bors_strlen($w), bors_strlen($masked));

			$masked = self::mask($w, false);
			$test->assertEquals($w, $masked);
		}
	}

	static function __dev()
	{
		$text = '–≥–æ–≤–Ω–æ –ø–∏–¥–æ—Ä—ã —Ö–ª–µ–±–Ω—É–ª–æ —Ö—Ä–µ–±—Ç–æ–º —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ —É—á–µ–±–Ω—É—é';
		echo self::mask($text, true), PHP_EOL;
	}
}
